#!/bin/sh

# Script variables
BOLDRED="\e[1;31m"
BOLDGREEN="\e[1;32m"
BOLDCYAN="\e[38;2;95;135;255m"
BOLDMAGENTA="\e[1;35m"
BOLDRED="\e[1;31m"
BOLDORANGE="\e[1;38;2;255;165;0m"
ENDCOLOR="\e[0m"
export ARCHAVISTO_VERSION="2.1.5"
# GitHub variables
OWNER="AvistoTelecom"
REPO="ArchAvisto"
ASSET_NAME="bootscript"
RELEASE="${RELEASE:-latest}"   # "latest" or a tag name like 1.1.3

set -e
trap handle_error ERR

handle_error() {
	printf "${BOLDRED}[ERROR] Something went wrong! Exiting... ${ENDCOLOR}\n"
	printf "${BOLDGREEN}Fill in a ticket on https://support.advans-group.com or contact maintainers on Teams.${ENDCOLOR}\n"
	sudo rm -f /opt/startup/bootscript /opt/startup/script.sh
	exit 1
}

wait_unlock() {
	# waiting for the file descriptor to be freed
	while lsof $1 >/dev/null 2>&1; do
		sleep 0.1
	done
}

# Download and verify the 'bootscript' asset from the latest release of ArchAvisto
printf "${BOLDCYAN}Downloading the bootscript...${ENDCOLOR}\n"
# Step 1: Pick the right API endpoint
if [ "$RELEASE" = "latest" ]; then
    release_url="https://api.github.com/repos/$OWNER/$REPO/releases/latest"
else
    release_url="https://api.github.com/repos/$OWNER/$REPO/releases/tags/$RELEASE"
fi

# 2. Fetch release JSON
release_json=$(curl --fail -s "$release_url")

# 3. Find asset metadata
asset_json=$(echo "$release_json" | jq -r ".assets[] | select(.name == \"$ASSET_NAME\")")

if [ -z "$asset_json" ] || [ "$asset_json" = "null" ]; then
	printf "${BOLDRED}[ERROR] could not find asset '$ASSET_NAME' GitHub '$RELEASE' release for ArchAvisto${ENDCOLOR}\n"
	exit 1
fi

asset_id=$(echo "$asset_json" | jq -r ".id")
# The digest field looks like "sha256:abcdef..."
digest_full=$(echo "$asset_json" | jq -r ".digest")

if [ -z "$digest_full" ] || [ "$digest_full" = "null" ]; then
	printf "${BOLDRED}[ERROR] no digest found in metadata for asset '$ASSET_NAME'${ENDCOLOR}\n"
	exit 1
fi

# Strip off "sha256:" prefix
expected_sha=${digest_full#sha256:}

# 4. Download asset via API (binary)
asset_url="https://api.github.com/repos/$OWNER/$REPO/releases/assets/$asset_id"

curl --fail -s -L \
	-H "Accept: application/octet-stream" \
	-o "/opt/startup/$ASSET_NAME" \
	"$asset_url"

# 5. Compute local SHA256
downloaded_sha=$(sha256sum "$ASSET_NAME" | awk '{print $1}')

if [ "$expected_sha" != "$downloaded_sha" ]; then
	printf "${BOLDRED}[ERROR] checksum mismatch for asset '$ASSET_NAME'${ENDCOLOR}\n"
	exit 1
fi

printf "${BOLDGREEN}Binary integrity verified successfully${ENDCOLOR}\n"

wait_unlock "/opt/startup/$ASSET_NAME"
chmod +x /opt/startup/$ASSET_NAME
wait_unlock "/opt/startup/$ASSET_NAME"

/opt/startup/$ASSET_NAME
/opt/startup/script.sh
sudo sed -i "s/^PRETTY_NAME=.*/PRETTY_NAME=\"Arch Avisto v${ARCHAVISTO_VERSION}\"/" /etc/os-release

printf "${BOLDGREEN}Installation complete${ENDCOLOR}\n"
printf "${BOLDORANGE}[WARNING] Now you must restart WSL using the commands ${BOLDRED}wsl -t <distro-name> ${BOLDORANGE}and then ${BOLDRED}wsl -d <distro-name>${ENDCOLOR}"
